@using System.Diagnostics
@using Microsoft.Extensions.Logging
@inject AppState State
@inject PowerPointTemplateService TemplateService
@inject IApplicationInsights AppInsights
@inject ILogger<UploadPowerPointTemplateStep> logger

<h2 class="mb-4 text-2xl tracking-tight font-bold text-gray-900 dark:text-white">Badge Template</h2>

<p class="mb-4 text-gray-600 dark:text-gray-400">
  Upload a PowerPoint file with a single slide of designed badge(s). To identify where the participant's name will go,
  use the placeholders <code>first_n</code> and <code>last_n</code>, where <code>n</code> represents the name placeholder 
  index, correlating the first and last name.
</p>

<p class="mb-4 text-gray-600 dark:text-gray-400">
  <span class="italic">Tip:</span> Using <code>FIRST_N</code> and <code>LAST_N</code> will transform the given names to UPPERCASE. 
</p>

<p class="mb-4 text-gray-600 dark:text-gray-400">
  You can optionally download one of these base templates to get started:
</p>
<ul class="mb-4 ml-5 text-gray-600 dark:text-gray-400 list-disc">
  <li>
    <NavLink class="text-blue-600 dark:text-blue-500 hover:underline"
      href="downloads/Eight Single-Sided Badge Template.pptx" target="_blank">Eight Single-Sided Badge Template
    </NavLink>
  </li>
  <li>
    <NavLink class="text-blue-600 dark:text-blue-500 hover:underline"
      href="downloads/Single Double-Sided Badge Template.pptx" target="_blank">Single Double-Sided Badge Template
    </NavLink>
  </li>
</ul>

<div class="p-4 mb-4 text-sm text-blue-700 bg-blue-100 rounded-lg dark:bg-blue-200 dark:text-blue-800" role="alert">
  <svg class="w-6 h-6 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>
  <span class="font-medium">Security is important!</span>
  All the processing this application does is on your computer. That means neither the template file or the names you
  provide will be sent on. üëç
</div>

<div class="mb-4 flex justify-center items-center w-full">
  <label for="dropzone-file"
    class="relative flex flex-col justify-center items-center w-full h-64 bg-gray-50 rounded-lg border-2 border-gray-300 border-dashed cursor-pointer dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
    <div class="flex flex-col justify-center items-center pt-5 pb-6">
      <svg aria-hidden="true" class="mb-3 w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
      </svg>
      <p class="mb-2 text-sm text-gray-600 dark:text-gray-400"><span class="font-semibold">Click to upload</span> or
        drag and drop</p>
      <p class="text-xs text-gray-600 dark:text-gray-400">A single slide <code>.pptx</code> file</p>
    </div>
    <InputFile OnChange="OnFileSelected" id="dropzone-file" type="file" class="absolute h-full w-full opacity-0" accept=".pptx" />
  </label>
</div>

@if (!string.IsNullOrWhiteSpace(State.FileName))
{
  <div
  class="block p-4 mb-4 bg-white rounded-lg border border-gray-200 shadow-md hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
    <p class="font-normal text-gray-700 dark:text-gray-400">
      File selected: <span class="font-medium">@State.FileName</span>.
    </p>
  </div>
}

@if (State.PowerPointFile is not null && !IsValidatingFile)
{
  <h3 class="mt-2 mb-4 text-l tracking-tight font-bold text-gray-900 dark:text-white">Template Validation</h3>
  <p class="mb-4 text-gray-600 dark:text-gray-400">
    Please review the discovered placeholders below and resolve the issues, if any, before continuing.
  </p>
  @if (State.DiscoveredPlaceholders is not null && State.DiscoveredPlaceholders.Any())
  {
    <div class="overflow-x-auto relative mb-4 sm:rounded-lg">
      <table class="w-full text-sm text-left text-gray-600 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
          <tr>
            <th scope="col" class="py-3 px-6">
              <code>n</code>
            </th>
            <th scope="col" class="py-3 px-6">
              <code>first_n</code>
            </th>
            <th scope="col" class="py-3 px-6">
              <code>last_n</code>
            </th>
          </tr>
        </thead>
        <tbody>
          @foreach (var discoveredPlaceholder in State.DiscoveredPlaceholders.OrderBy(x => x.Index))
          {
            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
              <th scope="row" class="py-2 px-4">
                <code>@discoveredPlaceholder.Index</code>
              </th>
              <td class="py-4 px-6">
                @if (discoveredPlaceholder.FirstCount == 0)
                {
                  <span class="flex gap-2">
                    <CrossIcon />
                    None found, at least one expected
                  </span>
                }
                else
                {
                  <span class="flex gap-2">
                    <TickIcon />
                    @discoveredPlaceholder.FirstCount @(discoveredPlaceholder.FirstCount == 1 ? "placeholder" : "placeholders") found
                  </span>
                }
              </td>
              <td class="py-4 px-6">
                @if (discoveredPlaceholder.LastCount == 0)
                {
                  <span class="flex gap-2">
                    <CrossIcon />
                    None found, at least one expected
                  </span>
                }
                else
                {
                  <span class="flex gap-2">
                    <TickIcon />
                    @discoveredPlaceholder.LastCount @(discoveredPlaceholder.LastCount == 1 ? "placeholder" : "placeholders") found
                  </span>
                }
              </td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  }

  @if (!string.IsNullOrEmpty(ErrorText))
  {
    <div class="p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800" role="alert">
      <CrossIcon Class="inline-block"/>
      <span class="font-medium">Validation error</span>
      @((MarkupString)ErrorText)
    </div>
  }
}

@if (!IsValidatingFile)
{
  <button type="button" @onclick="Continue" disabled="@(!CanContinue)"
  class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 disabled:bg-blue-400 disabled:dark:bg-blue-300 disabled:cursor-not-allowed">
    Continue
  </button>
}
else
{
  <button disabled type="button"
  class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 inline-flex items-center">
    <svg role="status" class="inline mr-3 w-4 h-4 text-white animate-spin" viewBox="0 0 100 101" fill="none"
    xmlns="http://www.w3.org/2000/svg">
      <path
      d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
      fill="#E5E7EB" />
      <path
      d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
      fill="currentColor" />
    </svg>
    Validating...
  </button>
}

@code {
  bool IsValidatingFile = false;
  bool CanContinue => State.PowerPointFile is not null && State.DiscoveredPlaceholders is not null && TemplateService.IsTemplateValid(State.DiscoveredPlaceholders);
  string ErrorText = string.Empty;

  [Parameter]
  public EventCallback OnNext { get; set; }

  async Task OnFileSelected(InputFileChangeEventArgs e)
  {
    Reset();

    var sw = Stopwatch.StartNew();

    State.FileName = e.File.Name;

    try
    {
      using var stream = e.File.OpenReadStream(4 * 1024 * 1024);
      using var memoryStream = new MemoryStream();
      await stream.CopyToAsync(memoryStream);
      State.PowerPointFile = memoryStream.ToArray();

      State.DiscoveredPlaceholders = TemplateService.DiscoverTemplates(State.PowerPointFile);
      State.BadgesPerPage = State.DiscoveredPlaceholders.Count();

      if (State.DiscoveredPlaceholders.Count() == 0)
      {
        throw new Exception("It looks like no placeholders were found. Please ensure there is atleast <code>first_1</code> and <code>last_1</code> and that the whole placeholder has matching font styling.");
      }

      await AppInsights.TrackEvent("ValidateTemplate", new Dictionary<string, object?>{
        { "FileSize", e.File.Size },
        { "BadgesPerPage", State.BadgesPerPage },
        { "DiscoveredPlaceholders", State.DiscoveredPlaceholders },
        { "Duration", sw.ElapsedMilliseconds },
      });
    }
    catch (Exception ex)
    {
      ErrorText = ex.Message;

      await AppInsights.TrackException(new Error
      {
        Name = ex.GetType()!.AssemblyQualifiedName!,
        Message = ex.Message,
        Stack = ex.StackTrace,
      }, properties: new Dictionary<string, object?>{
        { "FileSize", e.File.Size },
        { "Duration", sw.ElapsedMilliseconds },
      });
    }

    IsValidatingFile = false;
  }

  Task Continue() => OnNext.InvokeAsync();

  void Reset() {
    IsValidatingFile = true;
    State.DiscoveredPlaceholders = null;
    ErrorText = string.Empty;
    StateHasChanged();
  }

}