@page "/"
@using blazejewicz.Blazor.BeforeUnload
@inject AppState State
@inject BeforeUnload BeforeUnload
@inject PlausibleService PlausibleService

<PageTitle>Name Badge Automater</PageTitle>

<WizardSteps stage="@stage" OnTabClicked="TabClicked" />

@if (stage == WizardStages.UploadTemplate)
{
  <UploadPowerPointTemplateStep OnNext="Next" />
}
else if (stage == WizardStages.EnterNames)
{
  <EnterParticipantNamesStep OnNext="@Next" OnBack="@Back" />
}
else if (stage == WizardStages.FormatNames)
{
  <FormatParticipantNamesStep OnNext="@Next" OnBack="@Back" />
}
else if (stage == WizardStages.ReviewAndGenerate)
{
  <ReviewAndGenerateStep OnBack="@Back" />
}

<div class="fixed bottom-5 right-5 flex flex-col gap-2">
  <SupportToast />
  <TrackingToast />
  <NewUpdateToast />
</div>


@code {
  WizardStages stage = WizardStages.UploadTemplate;

  protected override void OnInitialized()
  {
    BeforeUnload.BeforeUnloadHandler += BeforeUnloadHandler;
  }

  void Next()
  {
    stage = stage switch
    {
      WizardStages.UploadTemplate => WizardStages.EnterNames,
      WizardStages.EnterNames => WizardStages.FormatNames,
      WizardStages.FormatNames => WizardStages.ReviewAndGenerate,
      WizardStages.ReviewAndGenerate => WizardStages.ReviewAndGenerate,
      _ => throw new Exception("There must be a stage."),
    };
    PlausibleService.TrackPageView(stage.ToString());
  }

  void Back()
  {
    stage = stage switch
    {
      WizardStages.UploadTemplate => WizardStages.UploadTemplate,
      WizardStages.EnterNames => WizardStages.UploadTemplate,
      WizardStages.FormatNames => WizardStages.EnterNames,
      WizardStages.ReviewAndGenerate => WizardStages.FormatNames,
      _ => throw new Exception("There must be a stage."),
    };
    PlausibleService.TrackPageView(stage.ToString());
  }

  void TabClicked(WizardStages stage)
  {
    this.stage = stage;
    PlausibleService.TrackPageView(stage.ToString());
  }

  public void Dispose()
  {
    BeforeUnload.BeforeUnloadHandler -= BeforeUnloadHandler;
  }

  void BeforeUnloadHandler(object? sender, BeforeUnloadArgs args)
  {
    var isMidProcess = (State.PowerPointFile is not null || State.People.Any()) && !State.HasGeneratedBadges;

    if (isMidProcess)
    {
      PlausibleService.TrackEvent("LeavingMidProcess", new {
        TemplateFile = State.PowerPointFile is not null,
        People = State.People.Any(),
        Page = stage.ToString(),
      });
    }

    args.CancelRequested = isMidProcess;
  }

}
