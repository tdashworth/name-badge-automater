@inject AppState State
@inject PowerPointTemplateService TemplateService
@inject IJSRuntime JS

<h2 class="mb-4 text-2xl tracking-tight font-bold text-gray-900 dark:text-white">Review and Create</h2>

<ul class="space-y-4 mb-4">
  <li class="flex items-center font-light text-gray-500 dark:text-gray-400">
    <svg class="h-6 w-6 flex-none fill-transparent @CheckboxColour(State.PowerPointFile is not null) stroke-2"
      stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="11" />
      <path d="m8 13 2.165 2.165a1 1 0 0 0 1.521-.126L16 9" fill="none" />
    </svg>
    <p class="ml-4">
      PowerPoint template uploaded
    </p>
  </li>
  <li class="flex items-center font-light text-gray-500 dark:text-gray-400">
    <svg class="h-6 w-6 flex-none fill-transparent @CheckboxColour(State.People.Any()) stroke-2" stroke-linecap="round"
      stroke-linejoin="round">
      <circle cx="12" cy="12" r="11" />
      <path d="m8 13 2.165 2.165a1 1 0 0 0 1.521-.126L16 9" fill="none" />
    </svg>
    <p class="ml-4">
      Participant names provided
    </p>
  </li>
</ul>

<p class="mb-4 font-light text-gray-500 dark:text-gray-400">
  You have provided @State.People.Count() names to generate badges for. That will be @pageCount pages.
</p>

<label for="default-toggle" class="inline-flex relative items-center cursor-pointer mb-4">
  <input type="checkbox" value="" id="default-toggle" class="sr-only peer" @bind="BlankUnusedBadges">
  <div
    class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
  </div>
  <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">@(BlankUnusedBadges ? "Blank placeholders from unused badges" : "Leave placeholders from unused badges")</span>
</label>

<div class="p-4 mb-4 text-sm text-blue-700 bg-blue-100 rounded-lg dark:bg-blue-200 dark:text-blue-800" role="alert">
  <svg class="w-6 h-6 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>
  <span class="font-medium">Be aware</span>
  the broswer will freeze while the generation takes place. This should only take less than a minute.
</div>

@if (!IsLoading)
{
  <button type="button"
  class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 disabled:bg-blue-400 disabled:dark:bg-blue-300 disabled:cursor-not-allowed"
  @onclick="GeneratorAndDownload" disabled="@(!CanContinue)">Generate</button>
}
else
{
  <button disabled type="button"
  class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 inline-flex items-center">
  <svg role="status" class="inline mr-3 w-4 h-4 text-white animate-spin" viewBox="0 0 100 101" fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <path
      d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
      fill="#E5E7EB" />
    <path
      d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
      fill="currentColor" />
  </svg>
  Loading...
</button>
}

<button type="button"
  class="py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
  @onclick="Back">Back</button>

@code {
  int pageCount => (int)Math.Round(State.People.Count() / 8.0, MidpointRounding.ToPositiveInfinity);
  bool BlankUnusedBadges { get; set; } = true;
  bool IsLoading = false;
  bool CanContinue => State.PowerPointFile is not null && State.People.Any();

  [Parameter]
  public EventCallback OnBack { get; set; }

  async Task GeneratorAndDownload()
  {
    IsLoading = true;
    StateHasChanged();

    if (State.PowerPointFile is null || State.PowerPointFile.Length == 0) throw new Exception("No PowerPoint template provided.");

    Console.WriteLine(DateTime.Now.Millisecond);
    var bytes = State.PowerPointFile;
    var people = State.People.Select(person => $"{person.FirstName} {person.LastName}").ToArray();
    var blankUnusedBadges = BlankUnusedBadges;
    var result = await State.Service.RunAsync(s => s.GenerateFromTemplate(bytes, people, blankUnusedBadges));
    Console.WriteLine(DateTime.Now.Millisecond);

    using var streamRef = new DotNetStreamReference(stream: new MemoryStream(result));

    await JS.InvokeVoidAsync("downloadFileFromStream", "Generated Name Badges.pptx", streamRef);

    State.HasGeneratedBadges = true;
    IsLoading = false;
  }

  string CheckboxColour(bool condition) => condition ? "stroke-green-600" : "stroke-red-600";

  Task Back() => OnBack.InvokeAsync();

}
