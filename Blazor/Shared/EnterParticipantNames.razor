@using System.Text
@using System.Text.RegularExpressions
@inject AppState State

<h2 class="mb-4 text-2xl tracking-tight font-bold text-gray-900 dark:text-white">Paticipant Names</h2>

<p class="mb-4 font-light text-gray-500 dark:text-gray-400">
  Enter a list of names to generator badges with. Each perosn should be on a new line and can be either their of the
  following formats:
</p>
<ul class="mb-4 ml-5 font-light text-gray-500 dark:text-gray-400 list-disc">
  <li>FirstName LastName</li>
  <li>LastName, FirstName</li>
  <li>FirstName.LastName@email.com</li>
  <li>FirstName LastName  &lt;some.email@email.com&gt;</li>
  <li>LastName, FirstName &lt;some.email@email.com&gt;</li>
</ul>

<textarea
  class="block p-2.5 mb-4 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
  id="rawNames" rows="20" @bind="RawNames" @bind:event="oninput"></textarea>

@* Validation Errors *@

<button type="button"
  class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
  @onclick="ProcessRawNames">@(AreNamesEntered ? "Continue" : "Skip")</button>

<button type="button"
  class="py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
  @onclick="Back">Back</button>


@code {
  string RawNames { get; set; } = string.Empty;
  bool AreNamesEntered => !string.IsNullOrWhiteSpace(RawNames);

  Regex EmailListRegex = new Regex("<.*@.*>");

  [Parameter]
  public EventCallback OnNext { get; set; }
  
  [Parameter]  
  public EventCallback OnBack { get; set; } 

  protected override Task OnInitializedAsync()
  {
    if (State.People.Any())
    {
      var stringBuilder = new StringBuilder();

      State.People.ForEach(person => stringBuilder.AppendLine($"{person.FirstName} {person.LastName}"));

      RawNames = stringBuilder.ToString();
    }
    return base.OnInitializedAsync();
  }

  Task ProcessRawNames()
  {
    if (!string.IsNullOrWhiteSpace(RawNames))
    {
      State.People = RawNames
      .Split(Environment.NewLine)
      .SelectMany(line => line.Split(";"))
      .Select(ParseRawName)
      .Where(person => person is not null)
      .Cast<Person>()
      .ToList();
    }

    return OnNext.InvokeAsync();
  }

  Task Back() => OnBack.InvokeAsync();

  Person? ParseRawName(string rawName)
  {
    if (string.IsNullOrWhiteSpace(rawName)) return null; // No name.

    rawName = rawName.Trim();

    if (EmailListRegex.IsMatch(rawName)) // * <FirstName.LastName@email.com>
    { 
      rawName = EmailListRegex.Replace(rawName, string.Empty);
    }

    if (rawName.Contains("@")) // FirstName.LastName@email.com
    {
      var nameParts = rawName.Split("@").First().Split(".");
      return new Person { FirstName = nameParts[0].Trim().ToSentenceCase(), LastName = nameParts[1].Trim().ToSentenceCase() };
    }

    if (rawName.Contains(",")) // LastName, FirstName
    {
      var nameParts = rawName.Split(",");
      return new Person { FirstName = nameParts[1].Trim().ToSentenceCase(), LastName = nameParts[0].Trim().ToSentenceCase() };
    }

    if (rawName.Contains(" ")) // FirstName LastName
    {
      var nameParts = rawName.Split(" ");
      return new Person { FirstName = nameParts[0].Trim().ToSentenceCase(), LastName = nameParts[1].Trim().ToSentenceCase() };
    }

    return null;
  }
}