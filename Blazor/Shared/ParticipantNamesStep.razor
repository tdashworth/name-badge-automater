@inject AppState State

<h2>Paticipant Names</h2>

@if (!AreRawNamesProcessed)
{


  <p>
    Enter a list of names to generator badges with. Each perosn should be on a new line and can be either their of the
    following formats:
  </p>
  <ul>
    <li>FirstName LastName</li>
    <li>LastName, FirstName</li>
    <li>FirstName.LastName@email.com</li>
  </ul>

  <textarea class="form-control" id="rawNames" rows="20" @bind="RawNames"></textarea>

  @* Validation Errors *@

  <button type="button" class="btn btn-secondary" @onclick="ProcessRawNames">Validate and Process</button>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th scope="col">First</th>
        <th scope="col">Last</th>
        <th scope="col">Actions</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var person in State.People)
      {
        <tr>
          <td><input type="text" class="form-control" name="FirstName" @bind-value="@person.FirstName" /></td>
          <td><input type="text" class="form-control" name="LastName" @bind-value="@person.LastName" /></td>
          <td><button type="button" class="btn btn-danger" @onclick="() => RemovePerson(person)">Remove</button></td>
        </tr>
      }
      <tr>
        <td><input type="text" class="form-control" name="FirstName" @bind-value="@NewPerson.FirstName" /></td>
        <td><input type="text" class="form-control" name="LastName" @bind-value="@NewPerson.LastName" /></td>
        <td><button type="button" class="btn btn-secondary" @onclick="AddPerson">Add</button></td>
      </tr>
    </tbody>
  </table>

}

@code {
  string RawNames { get; set; } = string.Empty;
  bool AreRawNamesProcessed = false;
  Person NewPerson = new Person();

  void ProcessRawNames()
  {
    if (string.IsNullOrWhiteSpace(RawNames)) return; // No data.

    State.People = RawNames
    .Split(Environment.NewLine)
    .Select(ParseRawName)
    .Where(person => person is not null)
    .Cast<Person>()
    .ToList();

    if (!State.People.Any()) return; // No data.

    AreRawNamesProcessed = true;
  }

  void AddPerson()
  {
    State.People.Add(NewPerson);
    NewPerson = new Person();
  }

  void RemovePerson(Person person)
  {
    State.People.Remove(person);
  }

  Person? ParseRawName(string rawName)
  {
    if (string.IsNullOrWhiteSpace(rawName)) return null; // No name.

    if (rawName.Contains("@"))
    {
      var nameParts = rawName.Split("@").First().Split(".");
      return new Person { FirstName = nameParts[0].Trim().ToSentenceCase(), LastName = nameParts[1].Trim().ToSentenceCase() };
    }

    if (rawName.Contains(","))
    {
      var nameParts = rawName.Split(",");
      return new Person { FirstName = nameParts[1].Trim().ToSentenceCase(), LastName = nameParts[0].Trim().ToSentenceCase() };
    }

    if (rawName.Contains(" "))
    {
      var nameParts = rawName.Split(" ");
      return new Person { FirstName = nameParts[0].Trim().ToSentenceCase(), LastName = nameParts[1].Trim().ToSentenceCase() };
    }

    return null;
  }
}