@page "/"
@using blazejewicz.Blazor.BeforeUnload
@inject AppState State
@inject BeforeUnload BeforeUnload
@inject IApplicationInsights AppInsights

<PageTitle>Name Badge Automater</PageTitle>

<div class="relative min-h-screen">
  <article class="p-8 max-w-3xl mx-auto">

    <h1 class="mb-4 text-4xl tracking-tight font-bold text-gray-900 dark:text-white">Name Badge Automater</h1>

    <WizardSteps stage="@stage" OnTabClicked="TabClicked" />

    @if (stage == WizardStages.UploadTemplate)
    {
      <UploadPowerPointTemplate OnNext="Next" />
    }
    else if (stage == WizardStages.EnterNames)
    {
      <EnterParticipantNames OnNext="@Next" OnBack="@Back" />
    }
    else if (stage == WizardStages.FormatNames)
    {
      <FormatParticipantNames OnNext="@Next" OnBack="@Back" />
    }
    else if (stage == WizardStages.ReviewAndGenerate)
    {
      <ReviewAndGenerateStep OnBack="@Back" />
    }

  </article>

  <div class="fixed bottom-5 right-5 flex flex-col gap-2">
    <SupportToast />
    <TrackingToast />
  </div>
</div>


@code {
  WizardStages stage = WizardStages.UploadTemplate;

  protected override void OnInitialized()
  {
    BeforeUnload.BeforeUnloadHandler += BeforeUnloadHandler;
  }

  void Next()
  {
    stage = stage switch
    {
      WizardStages.UploadTemplate => WizardStages.EnterNames,
      WizardStages.EnterNames => WizardStages.FormatNames,
      WizardStages.FormatNames => WizardStages.ReviewAndGenerate,
      WizardStages.ReviewAndGenerate => WizardStages.ReviewAndGenerate,
      _ => throw new Exception("There must be a stage."),
    };
    AppInsights.TrackPageView(stage.ToString());
  }

  void Back()
  {
    stage = stage switch
    {
      WizardStages.UploadTemplate => WizardStages.UploadTemplate,
      WizardStages.EnterNames => WizardStages.UploadTemplate,
      WizardStages.FormatNames => WizardStages.EnterNames,
      WizardStages.ReviewAndGenerate => WizardStages.FormatNames,
      _ => throw new Exception("There must be a stage."),
    };
    AppInsights.TrackPageView(stage.ToString());
  }

  void TabClicked(WizardStages stage)
  {
    this.stage = stage;
    AppInsights.TrackPageView(stage.ToString());
  }

  public void Dispose()
  {
    BeforeUnload.BeforeUnloadHandler -= BeforeUnloadHandler;
  }

  void BeforeUnloadHandler(object? sender, BeforeUnloadArgs args)
  {
    var isMidProcess = (State.PowerPointFile is not null || State.People.Any()) && !State.HasGeneratedBadges;

    if (isMidProcess)
    {
      AppInsights.TrackEvent("LeavingMidProcess", new Dictionary<string, object?> {
{ "TemplateFile", State.PowerPointFile is not null },
{ "People", State.People.Any() },
{ "Page", stage.ToString() }
});
    }

    args.CancelRequested = isMidProcess;
  }

}
