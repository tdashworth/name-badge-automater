@page "/"
@using blazejewicz.Blazor.BeforeUnload
@inject AppState State
@inject BeforeUnload BeforeUnload

<PageTitle>Name Badge Automater</PageTitle>

<div class="relative min-h-screen">
  <article class="p-8 max-w-3xl mx-auto">

    <h1 class="mb-4 text-4xl tracking-tight font-bold text-gray-900 dark:text-white">Name Badge Automater</h1>

    <WizardSteps stage="@stage" OnTabClicked="TabClicked" />

    @if (stage == WizardStages.UploadTemplate)
    {
      <UploadPowerPointTemplate OnNext="Next" />
    }
    else if (stage == WizardStages.EnterNames)
    {
      <EnterParticipantNames OnNext="@Next" OnBack="@Back" />
    }
    else if (stage == WizardStages.FormatNames)
    {
      <FormatParticipantNames OnNext="@Next" OnBack="@Back" />
    }
    else if (stage == WizardStages.ReviewAndGenerate)
    {
      <ReviewAndGenerateStep OnBack="@Back" />
    }

  </article>

  @if (IsSupportToastVisible)
  {
    <div id="toast-interactive"
    class="absolute bottom-5 right-5 p-4 w-full max-w-xs text-gray-500 bg-gray-50 rounded-lg shadow dark:bg-gray-800 dark:text-gray-400"
    role="alert">
      <div class="flex">
        <div
        class="inline-flex flex-shrink-0 justify-center items-center w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:text-blue-300 dark:bg-blue-900">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
            d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0c0 .993-.241 1.929-.668 2.754l-1.524-1.525a3.997 3.997 0 00.078-2.183l1.562-1.562C15.802 8.249 16 9.1 16 10zm-5.165 3.913l1.58 1.58A5.98 5.98 0 0110 16a5.976 5.976 0 01-2.516-.552l1.562-1.562a4.006 4.006 0 001.789.027zm-4.677-2.796a4.002 4.002 0 01-.041-2.08l-.08.08-1.53-1.533A5.98 5.98 0 004 10c0 .954.223 1.856.619 2.657l1.54-1.54zm1.088-6.45A5.974 5.974 0 0110 4c.954 0 1.856.223 2.657.619l-1.54 1.54a4.002 4.002 0 00-2.346.033L7.246 4.668zM12 10a2 2 0 11-4 0 2 2 0 014 0z"
            clip-rule="evenodd" />
          </svg>
          <span class="sr-only">Support icon</span>
        </div>
        <div class="ml-3 text-sm font-normal">
          <span class="mb-1 text-sm font-semibold text-gray-900 dark:text-white">Something wrong?</span>
          <div class="mb-2 text-sm font-normal">This app is maintained in people's free time. If you have any
            questions or experience a problem, please reach out.</div>
          <div class="grid grid-cols-2 gap-2">
            <div>
              <a href="mailto:github.support@tdashworth.uk?subject=Name Badge Automater"
              class="inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800">Contact</a>
            </div>
          </div>
        </div>
        <button type="button"
        class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
        data-dismiss-target="#toast-interactive" aria-label="Close" @onclick="() => IsSupportToastVisible = false">
          <span class="sr-only">Close</span>
          <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd"
            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
            clip-rule="evenodd"></path>
          </svg>
        </button>
      </div>
    </div>
  }
</div>


@code {
  WizardStages stage = WizardStages.UploadTemplate;
  bool IsSupportToastVisible = true;

  protected override void OnInitialized()
  {
    BeforeUnload.BeforeUnloadHandler += BeforeUnloadHandler;
  }

  void Next()
  {
    stage = stage switch
    {
      WizardStages.UploadTemplate => WizardStages.EnterNames,
      WizardStages.EnterNames => WizardStages.FormatNames,
      WizardStages.FormatNames => WizardStages.ReviewAndGenerate,
      WizardStages.ReviewAndGenerate => WizardStages.ReviewAndGenerate,
      _ => throw new Exception("There must be a stage."),
    };
  }

  void Back()
  {
    stage = stage switch
    {
      WizardStages.UploadTemplate => WizardStages.UploadTemplate,
      WizardStages.EnterNames => WizardStages.UploadTemplate,
      WizardStages.FormatNames => WizardStages.EnterNames,
      WizardStages.ReviewAndGenerate => WizardStages.FormatNames,
      _ => throw new Exception("There must be a stage."),
    };
  }

  void TabClicked(WizardStages stage)
  {
    this.stage = stage;
  }

  public void Dispose()
  {
    BeforeUnload.BeforeUnloadHandler -= BeforeUnloadHandler;
  }

  void BeforeUnloadHandler(object? sender, BeforeUnloadArgs args)
  {
    var isMidProcess = (State.PowerPointFile is not null || State.People.Any()) && !State.HasGeneratedBadges;

    args.CancelRequested = isMidProcess;
  }

}
